#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sistema.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ProvaMeta")]
	public partial class metaBancoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertNatureza(Natureza instance);
    partial void UpdateNatureza(Natureza instance);
    partial void DeleteNatureza(Natureza instance);
    partial void InsertConta(Conta instance);
    partial void UpdateConta(Conta instance);
    partial void DeleteConta(Conta instance);
    partial void InsertTipoConta(TipoConta instance);
    partial void UpdateTipoConta(TipoConta instance);
    partial void DeleteTipoConta(TipoConta instance);
    #endregion
		
		public metaBancoDataContext() : 
				base(global::Sistema.DAL.Properties.Settings.Default.ProvaMetaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public metaBancoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public metaBancoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public metaBancoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public metaBancoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Natureza> Naturezas
		{
			get
			{
				return this.GetTable<Natureza>();
			}
		}
		
		public System.Data.Linq.Table<Conta> Contas
		{
			get
			{
				return this.GetTable<Conta>();
			}
		}
		
		public System.Data.Linq.Table<TipoConta> TipoContas
		{
			get
			{
				return this.GetTable<TipoConta>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_natureza")]
	public partial class Natureza : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Nome;
		
		private int _id_elenco;
		
		private EntitySet<Conta> _Contas;
		
		private EntityRef<TipoConta> _TipoConta;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void Onid_elencoChanging(int value);
    partial void Onid_elencoChanged();
    #endregion
		
		public Natureza()
		{
			this._Contas = new EntitySet<Conta>(new Action<Conta>(this.attach_Contas), new Action<Conta>(this.detach_Contas));
			this._TipoConta = default(EntityRef<TipoConta>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="nome", Storage="_Nome", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_elenco", DbType="Int NOT NULL")]
		public int id_elenco
		{
			get
			{
				return this._id_elenco;
			}
			set
			{
				if ((this._id_elenco != value))
				{
					if (this._TipoConta.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_elencoChanging(value);
					this.SendPropertyChanging();
					this._id_elenco = value;
					this.SendPropertyChanged("id_elenco");
					this.Onid_elencoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Natureza_Conta", Storage="_Contas", ThisKey="id", OtherKey="id_natureza")]
		public EntitySet<Conta> Contas
		{
			get
			{
				return this._Contas;
			}
			set
			{
				this._Contas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoConta_Natureza", Storage="_TipoConta", ThisKey="id_elenco", OtherKey="id", IsForeignKey=true)]
		public TipoConta TipoConta
		{
			get
			{
				return this._TipoConta.Entity;
			}
			set
			{
				TipoConta previousValue = this._TipoConta.Entity;
				if (((previousValue != value) 
							|| (this._TipoConta.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoConta.Entity = null;
						previousValue.Naturezas.Remove(this);
					}
					this._TipoConta.Entity = value;
					if ((value != null))
					{
						value.Naturezas.Add(this);
						this._id_elenco = value.id;
					}
					else
					{
						this._id_elenco = default(int);
					}
					this.SendPropertyChanged("TipoConta");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contas(Conta entity)
		{
			this.SendPropertyChanging();
			entity.Natureza = this;
		}
		
		private void detach_Contas(Conta entity)
		{
			this.SendPropertyChanging();
			entity.Natureza = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_conta")]
	public partial class Conta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Nome;
		
		private int _id_natureza;
		
		private EntityRef<Natureza> _Natureza;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void Onid_naturezaChanging(int value);
    partial void Onid_naturezaChanged();
    #endregion
		
		public Conta()
		{
			this._Natureza = default(EntityRef<Natureza>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="nome", Storage="_Nome", DbType="VarChar(50)")]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_natureza", DbType="Int NOT NULL")]
		public int id_natureza
		{
			get
			{
				return this._id_natureza;
			}
			set
			{
				if ((this._id_natureza != value))
				{
					if (this._Natureza.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_naturezaChanging(value);
					this.SendPropertyChanging();
					this._id_natureza = value;
					this.SendPropertyChanged("id_natureza");
					this.Onid_naturezaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Natureza_Conta", Storage="_Natureza", ThisKey="id_natureza", OtherKey="id", IsForeignKey=true)]
		public Natureza Natureza
		{
			get
			{
				return this._Natureza.Entity;
			}
			set
			{
				Natureza previousValue = this._Natureza.Entity;
				if (((previousValue != value) 
							|| (this._Natureza.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Natureza.Entity = null;
						previousValue.Contas.Remove(this);
					}
					this._Natureza.Entity = value;
					if ((value != null))
					{
						value.Contas.Add(this);
						this._id_natureza = value.id;
					}
					else
					{
						this._id_natureza = default(int);
					}
					this.SendPropertyChanged("Natureza");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_elenco")]
	public partial class TipoConta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Nome;
		
		private EntitySet<Natureza> _Naturezas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    #endregion
		
		public TipoConta()
		{
			this._Naturezas = new EntitySet<Natureza>(new Action<Natureza>(this.attach_Naturezas), new Action<Natureza>(this.detach_Naturezas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="nome", Storage="_Nome", DbType="VarChar(50)")]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoConta_Natureza", Storage="_Naturezas", ThisKey="id", OtherKey="id_elenco")]
		public EntitySet<Natureza> Naturezas
		{
			get
			{
				return this._Naturezas;
			}
			set
			{
				this._Naturezas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Naturezas(Natureza entity)
		{
			this.SendPropertyChanging();
			entity.TipoConta = this;
		}
		
		private void detach_Naturezas(Natureza entity)
		{
			this.SendPropertyChanging();
			entity.TipoConta = null;
		}
	}
}
#pragma warning restore 1591
